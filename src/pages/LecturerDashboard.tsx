import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { StatusIndicator } from "@/components/StatusIndicator";
import { SidebarProvider, Sidebar, SidebarContent, SidebarTrigger } from "@/components/ui/sidebar";
import { 
  LayoutDashboard, 
  Plus, 
  Calendar, 
  Users, 
  Settings, 
  Play,
  Clock,
  CheckCircle
} from "lucide-react";
import { Link, useNavigate } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

const LecturerDashboard = () => {
  const { toast } = useToast();
  const navigate = useNavigate();
  const [classes, setClasses] = useState([]);
  const [attendanceStats, setAttendanceStats] = useState([]);
  const [loading, setLoading] = useState(true);

  // Fetch classes from database
  const fetchClasses = async () => {
    try {
      const { data, error } = await supabase
        .from("classes")
        .select("*")
        .order("created_at", { ascending: false });
      
      if (error) throw error;
      setClasses(data || []);
    } catch (error) {
      console.error("Error fetching classes:", error);
      toast({
        title: "Error",
        description: "Failed to fetch classes",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // Calculate attendance statistics
  const fetchAttendanceStats = async () => {
    try {
      // Get all classes with their attendance data
      const { data: classesData, error: classesError } = await supabase
        .from("classes")
        .select(`
          id,
          name,
          total_students,
          attendance_sessions (
            id,
            attendance_records (
              id
            )
          )
        `);

      if (classesError) throw classesError;

      const stats = classesData?.map(cls => {
        const totalSessions = cls.attendance_sessions.length;
        const totalAttendanceRecords = cls.attendance_sessions.reduce(
          (acc, session) => acc + session.attendance_records.length, 0
        );
        const maxPossibleAttendance = totalSessions * cls.total_students;
        const attendanceRate = maxPossibleAttendance > 0 
          ? Math.round((totalAttendanceRecords / maxPossibleAttendance) * 100)
          : 0;

        return {
          subject: cls.name,
          attendance: attendanceRate
        };
      }) || [];

      setAttendanceStats(stats);
    } catch (error) {
      console.error("Error fetching attendance stats:", error);
    }
  };

  // Start session for a class
  const handleStartSession = async (classId) => {
    try {
      const { data, error } = await supabase
        .from("attendance_sessions")
        .insert({
          class_id: classId,
          session_code: '', // Will be auto-generated by trigger
          is_active: true,
          start_time: new Date().toISOString(),
        })
        .select("*")
        .single();
      
      if (error) throw error;

      toast({
        title: "Session Started",
        description: `Session code: ${data.session_code}`,
      });
      
      // Redirect to session page
      navigate(`/session/${data.id}`);
    } catch (error) {
      console.error("Error starting session:", error);
      toast({
        title: "Error",
        description: "Couldn't start session: " + error.message,
        variant: "destructive",
      });
    }
  };

  useEffect(() => {
    fetchClasses();
    fetchAttendanceStats();
  }, []);

  return (
    <SidebarProvider>
      <div className="min-h-screen flex w-full">
        <Sidebar className="w-64">
          <SidebarContent className="p-4">
            <div className="mb-8">
              <h2 className="text-lg font-semibold text-primary">Attendify</h2>
              <p className="text-sm text-muted-foreground">Lecturer Dashboard</p>
            </div>
            
            <nav className="space-y-2">
              <Button variant="ghost" className="w-full justify-start" asChild>
                <Link to="/lecturer">
                  <LayoutDashboard className="mr-2 h-4 w-4" />
                  Dashboard
                </Link>
              </Button>
              <Button variant="ghost" className="w-full justify-start" asChild>
                <Link to="/schedule">
                  <Plus className="mr-2 h-4 w-4" />
                  Create Class
                </Link>
              </Button>
              <Button variant="ghost" className="w-full justify-start" asChild>
                <Link to="/schedule">
                  <Calendar className="mr-2 h-4 w-4" />
                  Schedule
                </Link>
              </Button>
              <Button variant="ghost" className="w-full justify-start" asChild>
                <Link to="/schedule">
                  <Users className="mr-2 h-4 w-4" />
                  Attendance
                </Link>
              </Button>
              <Button variant="ghost" className="w-full justify-start" asChild>
                <Link to="/schedule">
                  <Settings className="mr-2 h-4 w-4" />
                  Settings
                </Link>
              </Button>
            </nav>
          </SidebarContent>
        </Sidebar>

        <main className="flex-1 p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-3xl font-bold">Welcome back, Dr. Smith</h1>
              <p className="text-muted-foreground">Here's what's happening with your classes today</p>
            </div>
            <StatusIndicator connected={true} label="RFID Reader" />
          </div>

          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 mb-8">
            {/* Quick Stats */}
            <Card className="card-elevated">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Classes</CardTitle>
                <Clock className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{classes.length}</div>
                <p className="text-xs text-muted-foreground">
                  Total classes created
                </p>
              </CardContent>
            </Card>

            <Card className="card-elevated">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Average Attendance</CardTitle>
                <CheckCircle className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {attendanceStats.length > 0 
                    ? Math.round(attendanceStats.reduce((acc, stat) => acc + stat.attendance, 0) / attendanceStats.length) 
                    : 0}%
                </div>
                <p className="text-xs text-muted-foreground">
                  Across all courses
                </p>
              </CardContent>
            </Card>

            <Card className="card-elevated">
              <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                <CardTitle className="text-sm font-medium">Total Students</CardTitle>
                <Users className="h-4 w-4 text-muted-foreground" />
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">
                  {classes.reduce((acc, cls) => acc + cls.total_students, 0)}
                </div>
                <p className="text-xs text-muted-foreground">
                  Across all courses
                </p>
              </CardContent>
            </Card>
          </div>

          <div className="grid gap-6 lg:grid-cols-2">
            {/* Upcoming Classes */}
            <Card className="card-elevated">
              <CardHeader>
                <CardTitle>Your Classes</CardTitle>
                <CardDescription>Manage your created classes</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {loading ? (
                  <div className="text-center py-8">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
                    <p className="text-muted-foreground">Loading classes...</p>
                  </div>
                ) : classes.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="text-muted-foreground mb-4">No classes created yet</div>
                    <Button asChild>
                      <Link to="/schedule">
                        <Plus className="mr-2 h-4 w-4" />
                        Create Your First Class
                      </Link>
                    </Button>
                  </div>
                ) : (
                  classes.map((class_) => (
                    <div key={class_.id} className="flex items-center justify-between p-4 border rounded-lg">
                      <div>
                        <h4 className="font-medium">{class_.name}</h4>
                        <p className="text-sm text-muted-foreground">
                          {class_.code} • {class_.time} • Room {class_.room}
                        </p>
                        <p className="text-xs text-muted-foreground">
                          {class_.total_students} students enrolled
                        </p>
                      </div>
                      <Button className="btn-success" onClick={() => handleStartSession(class_.id)}>
                        <Play className="mr-2 h-4 w-4" />
                        Start Session
                      </Button>
                    </div>
                  ))
                )}
              </CardContent>
            </Card>

            {/* Attendance Overview */}
            <Card className="card-elevated">
              <CardHeader>
                <CardTitle>Attendance Statistics</CardTitle>
                <CardDescription>Recent attendance rates by course</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {attendanceStats.length === 0 ? (
                  <div className="text-center py-8 text-muted-foreground">
                    <p>No attendance data available yet</p>
                    <p className="text-sm">Start some sessions to see statistics</p>
                  </div>
                ) : (
                  attendanceStats.map((stat, index) => (
                    <div key={index} className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>{stat.subject}</span>
                        <span className="font-medium">{stat.attendance}%</span>
                      </div>
                      <div className="w-full bg-muted rounded-full h-2">
                        <div 
                          className="bg-primary h-2 rounded-full transition-all duration-300" 
                          style={{ width: `${stat.attendance}%` }}
                        />
                      </div>
                    </div>
                  ))
                )}
              </CardContent>
            </Card>
          </div>
        </main>
      </div>
    </SidebarProvider>
  );
};

export default LecturerDashboard;